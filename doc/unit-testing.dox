/*
    This file is part of Corrade.

    Copyright © 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016
              Vladimír Vondruš <mosra@centrum.cz>

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

namespace Corrade {
/** @page unit-testing Unit testing with TestSuite

Corrade's test suite is inspired by QtTest framework, but without any need to
process code with meta compiler.

@section unit-testing-class Tester class

First step for creating unit test is to subclass @ref TestSuite::Tester class
and add tester functions to it.
@dontinclude test/MyTest.cpp
@skip struct MyTest
@until };

In constructor we register our test cases:
@skip MyTest::MyTest
@until }
@until }

Now we implement our test cases. The simplest macro is @ref CORRADE_VERIFY(),
which only verifies that expression is true, if not, it exits current test case
(i.e. skips processing the rest of the function) and prints error on error
output:
@skip MyTest::commutativity()
@until }

Next macro is @ref CORRADE_COMPARE(), which takes two values and compares them
for equality:
@skip MyTest::associativity()
@until }

If both values have different type or if we want to force some type for
comparison, we can use @ref CORRADE_COMPARE_AS(). This macro can be used also
for more involved comparison using "pseudo-types", see the @ref Comparator
class documentation for more information.
@skip MyTest::sin()
@until }

If you have some unimplemented or broken functionality, but don't want the
test to fail only because of that, you can use @ref CORRADE_EXPECT_FAIL()
macro, which expects all following checks until the end of the scope to fail:
@skip MyTest::pi()
@until }

For things that can't be tested on given platform (or are disabled) you can use
@ref CORRADE_SKIP() macro to indicate that the particular feature is not
tested:
@skip MyTest::bigEndian()
@until }

@section unit-testing-compilation Compilation and running

Lastly, we must not forget to create `main()` function using @ref CORRADE_TEST_MAIN()
macro:
@skipline CORRADE_TEST_MAIN

Now we can compile and run our test using CMake and
@ref corrade-cmake-add-test "corrade_add_test()" macro. Don't forget to call
also `enable_testing()` so `ctest` is able to collect and run all the tests.
@dontinclude test/CMakeLists.txt
@skip enable_testing
@until corrade_add_test

The test can be run either manually or using `ctest`. When executed, it
produces output similar to this:

    Starting Corrade::Examples::MyTest with 5 test cases...
      FAIL [1] commutativity() at examples/test/MyTest.cpp on line 51
            Expression 15/3 == 3/15 failed.
        OK [2] associativity()
        OK [3] sin()
     XFAIL [4] pi() at examples/test/MyTest.cpp on line 66
            Need better approximation. pi and 3.14 are not equal.
        OK [4] pi()
      SKIP [5] bigEndian()
            No affordable big endian machines exist to test this properly.
    Finished Corrade::Examples::MyTest with 1 errors out of 5 checks.

 - @ref test/MyTest.cpp
 - @ref test/CMakeLists.txt

*/
}}
